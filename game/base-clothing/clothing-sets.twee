:: Widgets Outfits [widget]
<<widget "listoutfits">>

<label><<radiobutton "$delete_outfit" "none" checked>> 입기</label> | <label><<radiobutton "$delete_outfit" 1>> 제거</label> | <label><<radiobutton "$delete_outfit" 2>> 덮어쓰기</label> | <label class="no-numberify"><<link 편집>><<overlayReplace "outfitEditor">><</link>></label>
<br>

<<for _i to 0; _i lt $outfit.length; _i++>>
	<<if $outfit[_i].location and $outfit[_i].location isnot $wardrobe_location>>
		<<continue>>
	<</if>>
	<div class = "wardrobe-action">
		<<capture _i>>
			<<link `$outfit[_i].name + ($outfit[_i].colors is false? "" : " [C]") + ($outfit[_i].location is undefined ? "" : " [L]")`>>
				<<set $wear_outfit = _i>>
				<<updatewardrobe "outfits">>
			<</link>> |
		<</capture>>
	</div>
<</for>>
<</widget>>

<<widget "listoutfitsPassage">>
<<set $wardrobe_location to $args[0]>>
<<wardrobeSelection true>>
<<for _i to 0; _i lt $outfit.length; _i++>>
	<<if $outfit[_i].location and $outfit[_i].location isnot $wardrobe_location>>
		<<continue>>
	<</if>>
	<<if !$outfit[_i].type.includes("swim") and !$outfit[_i].type.includes("sleep")>>
		<<print '<<link [[$outfit[_i].name+($outfit[_i].colors is false? "" : " [C]") + " 입기"|$passage]]>><<set $eventskip to 1>><<set $wear_outfit to ' + _i + '>><</link>>'>>
		<br>
	<</if>>
<</for>>
<</widget>>

<<widget "listsleepoutfits">>
<<switch $args[0]>>
	<<case "Farm Bed">>
		<<set _passage to $args[0]>>
		<<set $wardrobe_location to "alexFarm">>
		<<set $storeLocation to "Farm Bed">>
	<<case "prison bed">>
		<<set _passage to 'Prison Bed'>>
		<<set $wardrobe_location to "prison">>
		<<set $storeLocation to "prison bed">>
	<<default>>
		<<set _passage to "Bed">>
		<<set $wardrobe_location to "wardrobe">>
		<<set $storeLocation to "bed">>
<</switch>>
<<wardrobeSelection true>>
<<if $alwaysSleepNaked isnot true>>
	<<for _i to 0; _i lt $outfit.length; _i++>>
		<<if $outfit[_i].type.includes("sleep")>>
			<<bedicon>><<print '<<link [[$outfit[_i].name+($outfit[_i].colors is false? "" : " [C]") + " 입고 침대에 들어간다"|"'+_passage+'"]]>><<set $wear_outfit to ' + _i + '>><</link>>'>>
			<br>
		<</if>>
	<</for>>
<<else>>
	<<if $possessed>>
		<span class="red">당신 머리의 슬라임은 조용하다.</span>
		<br>
	<<else>>
		<span class="red">슬라임이 당신이 옷을 입고 자는 것을 허락하지 않는다.</span>
		<br>
	<</if>>
<</if>>
<</widget>>

<<widget "listswimoutfits">>
<<set $wardrobe_location to $args[0]>>
<<wardrobeSelection true>>
<<for _i to 0; _i lt $outfit.length; _i++>>
	<<if $outfit[_i].location and $outfit[_i].location isnot $wardrobe_location>>
		<<continue>>
	<</if>>
	<<if $outfit[_i].type.includes("swim")>>
		<<print '<<link [[$outfit[_i].name+($outfit[_i].colors is false? "" : " [C]") + " 입기"|$passage]]>><<set $eventskip to 1>><<set $wear_outfit to ' + _i + '>><<set $storeLocation to "'+$args[0]+'">><</link>>'>>
		<br>
	<</if>>
<</for>>
<</widget>>

<<widget "radiooutfits">>
<<for _i to 0; _i lt $outfit.length; _i++>>
	<<if $outfit[_i].location and $outfit[_i].location isnot $wardrobe_location>>
		<<continue>>
	<</if>>
	<label><<print '$outfit[_i].name 입기 <<radiobutton "$wear_outfit" "' + _i + '">>'>></label> |
<</for>>
<label>입었던 것으로 입기 <<radiobutton "$wear_outfit" "clotheson" checked>></label>
<</widget>>

<<widget "deleteoutfit">>
<<if $delete_outfit is 1 and $wear_outfit isnot "none">>
<<set $outfit.deleteAt($wear_outfit)>>
<<set $wear_outfit to "none">>
<</if>>
<</widget>>

<<widget "wearoutfit">>
<<if $wardrobe_location is "wardrobe" or $wardrobes[$wardrobe_location] is undefined>>
	<<set _selectedWardrobe to $wardrobe>>
<<else>>
	<<set _selectedWardrobe to $wardrobes[$wardrobe_location]>>
<</if>>
<<updateWornClothingLocation $wardrobe_location>>
<<deleteoutfit>>
<<overwriteoutfit>>
<<set $delete_outfit to "none">>

<<if $wear_outfit is "clotheson">>
	<<storeon $storeLocation>>
<<elseif $wear_outfit isnot "none">>
	<<set _equip to ["over_upper","over_lower","upper", "lower", "under_upper", "under_lower","over_head","head", "face", "neck", "hands", "legs", "feet"]>>
	<<set _equipSkip to {"over_upper":false, "over_lower":false, "upper":false, "lower":false, "under_upper":false, "under_lower":false, "over_head":false, "head":false, "face":false, "neck":false, "hands":false, "legs":false, "feet":false}>>
	<<set _storeItemSkip to {"over_upper":false, "over_lower":false, "upper":false, "lower":false, "under_upper":false, "under_lower":false, "over_head":false, "head":false, "face":false, "neck":false, "hands":false, "legs":false, "feet":false}>>
	<<set _equipDamageValue to {"over_upper":3, "over_lower":3, "upper":3, "lower":3, "under_upper":3, "under_lower":3, "over_head":1, "head":1, "face":1, "neck":1, "hands":1, "legs":1, "feet":1}>>
	<<set _corruptionEquipSkip to ["over_upper","over_lower","upper", "lower", "under_upper", "under_lower"]>>
	<<set _towels to ["towel top","large towel","towel skirt"]>>
	<<set _notEquipped to {}>>

	<<for _i to 0; _i lt _equip.length; _i++>>
		/*Skip slots that have been equipped with*/
		<<if _equipSkip[_equip[_i]] is true>>
			<<continue>>
		<</if>>
		/*Skip slots that have not been defined*/
		<<if $outfit[$wear_outfit][_equip[_i]] is undefined>>
			<<continue>>
		<</if>>

		/*Check for items that are cursed*/
		<<unset _preventItemEquip>>
		<<if $worn[_equip[_i]].cursed is 1>>
			<<set _preventItemEquip to true>>
		<</if>>
		<<set _outfitPrimaryOutfit to $worn[_equip[_i]].outfitPrimary>>
		<<if _outfitPrimaryOutfit isnot undefined>>
			<<for _labelOutfit, _valueOutfit range _outfitPrimaryOutfit>>
				<<if $worn[_labelOutfit].cursed is 1>>
					<<set _preventItemEquip to true>>
				<</if>>
			<</for>>
		<</if>>

		<<set $_storeLocation to ($storeLocation ? $storeLocation : $wardrobe_location)>>

		<<if _preventItemEquip is true>>
			<<if $outfit[$wear_outfit][_equip[_i]] is "naked">>
				<<set _notEquipped[_equip[_i]] to {"name": setup.clothes[_equip[_i]][$worn[_equip[_i]].index].name, "reason": "cursed unequip"}>>
			<<else>>
				<<set _notEquipped[_equip[_i]] to {"name": $outfit[$wear_outfit][_equip[_i]], "reason": "cursed slot"}>>
			<</if>>
		<<else>>
			<<if $outfit[$wear_outfit][_equip[_i]] is "naked">>
				<<generalUndress $_storeLocation _equip[_i]>>
			<<elseif _towels.includes($outfit[$wear_outfit][_equip[_i]])>>
				<<generalUndress $_storeLocation _equip[_i]>>
				<<if $worn[_equip[_i]].name is "naked">>
					<<switch $outfit[$wear_outfit][_equip[_i]]>>
						<<case "towel top">>
							<<set $worn.upper to clone(setup.clothes.upper[3])>>
						<<case "large towel">>
							<<generalUndress $_storeLocation "lower">>
							<<if $worn.lower.name is "naked">>
								<<set $worn.upper to clone(setup.clothes.upper[14])>>
								<<set $worn.lower to clone(setup.clothes.lower[15])>>
								<<set _equipSkip.lower to true>>
							<</if>>
						<<case "towel skirt">>
							<<set $worn.lower to clone(setup.clothes.lower[3])>>
					<</switch>>
				<</if>>
			<<else>>
				<<set _foundEquip to null>><<set _lastResort to null>><<unset _outFitPieces>>
				<<for _j to 0; _j lt _selectedWardrobe[_equip[_i]].length; _j++>>
					<<if $outfit[$wear_outfit][_equip[_i]] is _selectedWardrobe[_equip[_i]][_j].name>>
						/*Check for saved colors in clothing set*/
						<<if $outfit[$wear_outfit].colors isnot false and $outfit[$wear_outfit].colors isnot undefined>>
							<<if $outfit[$wear_outfit].colors[_equip[_i]][0] isnot _selectedWardrobe[_equip[_i]][_j].colour or $outfit[$wear_outfit].colors[_equip[_i]][1] isnot _selectedWardrobe[_equip[_i]][_j].accessory_colour>>
								<<continue>>
							<</if>>
							<<if _selectedWardrobe[_equip[_i]][_j].colour is "custom">>
								<<if _selectedWardrobe[_equip[_i]][_j].colourCustom isnot undefined or $outfit[$wear_outfit].colors[_equip[_i]+"custom"][0] isnot undefined>>
									<<if _selectedWardrobe[_equip[_i]][_j].colourCustom isnot $outfit[$wear_outfit].colors[_equip[_i]+"custom"][0]>>
										<<continue>>
									<</if>>
								<</if>>
							<</if>>
							<<if _selectedWardrobe[_equip[_i]][_j].accessory_colour is "custom">>
								<<if _selectedWardrobe[_equip[_i]][_j].colourCustom isnot undefined or $outfit[$wear_outfit].colors[_equip[_i]+"custom"][1] isnot undefined>>
									<<if _selectedWardrobe[_equip[_i]][_j].accessory_colourCustom isnot $outfit[$wear_outfit].colors[_equip[_i]+"custom"][1]>>
										<<continue>>
									<</if>>
								<</if>>
							<</if>>
						<</if>>
						/*Check for slime corruption*/
						<<if _corruptionEquipSkip.includes(_equip[_i])>>
							<<if $corruption_slime gte 80 and $willpower lt 800 and _selectedWardrobe[_equip[_i]][_j].reveal lt 500 and !_selectedWardrobe[_equip[_i]][_j].type.includesAny("school", "event")>>
								<<set _notEquipped[_equip[_i]] to {"name": $outfit[$wear_outfit][_equip[_i]], "reason": "corruption_slime_deny"}>>
								<<break>>
							<</if>>
						<</if>>

						/*Finds the least damaged outfit if the current clothing item is the main part and sets it as a last resort incase an undamaged one isnt found*/
						<<unset _outfitPrimaryWearOutfit>>
						<<set _damage to 0>>
						<<set _outfitPrimaryWearOutfit to _selectedWardrobe[_equip[_i]][_j].outfitPrimary>>
						<<if _outfitPrimaryWearOutfit isnot undefined>>
							/*Check for damaged parts*/
							<<for _labelWO, _valueWO range _outfitPrimaryWearOutfit>>
								<<if _valueWO is "broken">>
									<<set _damage += _equipDamageValue[_labelWO]>>
								<</if>>
							<</for>>
							<<if _lastResort is null and _damage gt 0>>
								<<set _lastResort to {}>>
								<<set _lastResort to {
									damage: clone(_damage),
									id: clone(_j)
								}>>
							<<elseif _damage gt 0>>
								<<if _damage lt _lastResort.damage>>
									<<set _lastResort to {
										damage: clone(_damage),
										id: clone(_j)
									}>>
								<</if>>
							<</if>>
							<<if _damage gt 0>>
								<<continue>>
							<</if>>
						<</if>>
						<<if _damage is 0>>
							<<set _foundEquip to {}>>
							<<set _foundEquip[_equip[_i]] to clone(_j)>>
						<</if>>
						<<break>>
					<</if>>
				<</for>>

				/*If the main outfit has not been found, use the last resort*/
				<<if _foundEquip is null and _lastResort isnot null>>
					<<if !($worn[_equip[_i]].name is $outfit[$wear_outfit][_equip[_i]] and $worn[_equip[_i]].one_piece is 1)>>
						<<set _foundEquip to {}>>
						<<set _foundEquip[_equip[_i]] to _lastResort.id>>
					<</if>>
				<</if>>

				/*Ensure at this point, the main piece of clothing has been found*/
				<<if _foundEquip isnot null>>
					/*Undress equip*/
					<<generalUndress $_storeLocation _equip[_i]>>

					/*Find all the outfit pieces now the main least damaged piece has been found if the clothing is part of an outfit*/
					<<unset _outfitPrimaryWearOutfit>>
					<<set _outfitPrimaryWearOutfit to _selectedWardrobe[_equip[_i]][_foundEquip[_equip[_i]]].outfitPrimary>>
					<<if _outfitPrimaryWearOutfit isnot undefined>>
						<<for _labelWO, _valueWO range _outfitPrimaryWearOutfit>>
							<<if _valueWO isnot "broken">>
								<<if !_storeItemSkip[_labelWO]>>
									<<generalUndress $_storeLocation _labelWO>>
								<</if>>
								<<for _k to 0; _k lt _selectedWardrobe[_labelWO].length; _k++>>
									<<if _valueWO is _selectedWardrobe[_labelWO][_k].name>>
										/*Skip broken pieces*/
										<<if _selectedWardrobe[_labelWO][_k].outfitSecondary[1] is "broken">>
											<<continue>>
										<</if>>
										/*Skip items that don't have matching colours*/
										<<if _selectedWardrobe[_equip[_i]][_j].colour isnot _selectedWardrobe[_labelWO][_k].colour or _selectedWardrobe[_equip[_i]][_j].accessory_colour isnot _selectedWardrobe[_labelWO][_k].accessory_colour>>
											<<continue>>
										<</if>>
										<<if _selectedWardrobe[_equip[_i]][_j].colour is "custom">>
											<<if _selectedWardrobe[_equip[_i]][_j].colourCustom isnot undefined and _selectedWardrobe[_labelWO][_k].colourCustom isnot undefined>>
												<<if _selectedWardrobe[_equip[_i]][_j].colourCustom isnot _selectedWardrobe[_labelWO][_k].colourCustom>>
													<<continue>>
												<</if>>
											<<else>>
												<<continue>>
											<</if>>
										<</if>>
										<<if _selectedWardrobe[_equip[_i]][_j].accessory_colour is "custom">>
											<<if _selectedWardrobe[_equip[_i]][_j].colourCustom isnot undefined and _selectedWardrobe[_labelWO][_k].accessory_colourCustom isnot undefined>>
												<<if _selectedWardrobe[_equip[_i]][_j].accessory_colourCustom isnot _selectedWardrobe[_labelWO][_k].accessory_colourCustom>>
													<<continue>>
												<</if>>
											<<else>>
												<<continue>>
											<</if>>
										<</if>>
										<<if _outFitPieces is undefined>>
											<<set _outFitPieces to {}>>
										<</if>>
										<<set _foundEquip[clone(_labelWO)] to clone(_k)>>
										<<set _equipSkip[_labelWO] to true>>
										<<break>>
									<</if>>
									<<if _k is _selectedWardrobe[_labelWO].length - 1>>
										/*None were found, error in code/save?*/
										<<set _notEquipped[_equip[_i]] to {"name": $outfit[$wear_outfit][_equip[_i]], "reason": "not found piece"}>>
									<</if>>
								<</for>>
							<</if>>
						<</for>>
					<</if>>
					/*Equip all the clothing items*/

					<<for _labelWO, _valueWO range _foundEquip>>
						<<set $worn[_labelWO] to clone(_selectedWardrobe[_labelWO][_valueWO])>>
						<<set $worn[_labelWO].lastTaken to clone($wardrobe_location)>>
						<<set _selectedWardrobe[_labelWO].deleteAt(_valueWO)>>
						<<resetClothingState _labelWO>>
					<</for>>
				<<else>>
					<<if $worn[_equip[_i]].name is $outfit[$wear_outfit][_equip[_i]]>>
						<<set _notEquipped[_equip[_i]] to {"name": $outfit[$wear_outfit][_equip[_i]], "reason": "not found replacement"}>>
						<<if $wardrobe_location isnot "wardrobe">>
							<<set _makeTempClothing to 1>>
							<<storeItem $wardrobe_location _equip[_i]>>
						<</if>>
					<<else>>
						<<set _notEquipped[_equip[_i]] to {"name": $outfit[$wear_outfit][_equip[_i]], "reason": "not found"}>>
						<<if $wardrobe_location isnot "wardrobe" and $worn[_equip[_i]].name isnot "naked">>
							<<set _makeTempClothing to 1>>
							<<storeItem $wardrobe_location _equip[_i]>>
						<</if>>
					<</if>>
				<</if>>
			<</if>>
		<</if>>
	<</for>>
<</if>>

<<if $wear_outfit isnot "none">>
	<<set _keys to Object.keys(_notEquipped)>>
	<<if _keys.length gt 0>>
		<<set _resultStrings to {}>>
		<<if $wardrobes[$wardrobe_location] is undefined>>
			<<set _locationName to "wardrobe">>
		<<else>>
			<<set _locationName to $wardrobe_location>>
		<</if>>
		<<set _wardrobeName to $wardrobes[_locationName].name + (!$wardrobes[_locationName].name.includes("locker") ? " wardrobe" : "")>>
		<<for _i to 0; _i lt _keys.length; _i++>>
			<<switch _notEquipped[_keys[_i]].reason>>
				<<case "not found">>
					<<if _resultStrings.notFound is undefined>>
						<<trWardrobeName _wardrobeName>><<set _resultStrings.notFound to {
							"start": "당신은 ",
							"end": " " + _trResult + "에서 찾을 수 없었다.",
							"count": 0,
							"color": "purple"
						}>>
					<</if>>
					<<set _resultStrings.notFound[_resultStrings.notFound.count] to _notEquipped[_keys[_i]].name>>
					<<set _resultStrings.notFound.count++>>
				<<case "not found replacement">>
					<<if _resultStrings.notFoundReplacement is undefined>>
						<<trWardrobeName _wardrobeName>><<set _resultStrings.notFoundReplacement to {
							"start": "당신은 현재 착용하고 있는 것을 대체할 ",
							"end": " " + _trResult + "에서 찾을 수 없었다.",
							"count": 0,
							"color": "lewd"
						}>>
					<</if>>
					<<set _resultStrings.notFoundReplacement[_resultStrings.notFoundReplacement.count] to _notEquipped[_keys[_i]].name>>
					<<set _resultStrings.notFoundReplacement.count++>>
				<<case "corruption_slime_deny">>
					<<if _resultStrings.corruption_slime_deny is undefined>>
						<<set _resultStrings.corruption_slime_deny to {
							"start": "당신은 귓속의 슬라임이 허락해 주지 않아서 ",
							"end": " 착용할 수 없었다.",
							"count": 0,
							"color": "red"
						}>>
					<</if>>
					<<set _resultStrings.corruption_slime_deny[_resultStrings.corruption_slime_deny.count] to _notEquipped[_keys[_i]].name>>
					<<set _resultStrings.corruption_slime_deny.count++>>
				<<case "cursed slot">>
					<<if _resultStrings.cursed is undefined>>
						<<set _resultStrings.cursed to {
							"start": "당신은 현재 착용하고 있는 것을 벗을 수가 없어서 ",
							"end": " 착용할 수 없었다.",
							"count": 0,
							"color": "red"
						}>>
					<</if>>
					<<set _resultStrings.cursed[_resultStrings.cursed.count] to _notEquipped[_keys[_i]].name>>
					<<set _resultStrings.cursed.count++>>
				<<case "cursed unequip">>
					<<if _resultStrings.cursedUnequip is undefined>>
						<<set _resultStrings.cursedUnequip to {
							"start": "당신은 현재 착용하고 있는 것을 스스로 벗을 수가 없어서 ",
							"end": " 착용할 수 없었다.",
							"count": 0,
							"color": "red"
						}>>
					<</if>>
					<<set _resultStrings.cursedUnequip[_resultStrings.cursedUnequip.count] to _notEquipped[_keys[_i]].name>>
					<<set _resultStrings.cursedUnequip.count++>>
				<<case "not found piece">>
					<<if _resultStrings.notFoundPiece is undefined>>
						<<set _resultStrings.notFoundPiece to {
							"start": "예기치 못한 문제로 (대부분 세이브파일 에러로) 당신은 ",
							"end": " 완전히 착용할 수 없었다. 관련 아이템을 버리고 다른 것으로 교체하면 아마도 이 문제를 해결할 수 있을 것이다.",
							"count": 0,
							"color": "red"
						}>>
					<</if>>
					<<set _resultStrings.notFoundPiece[_resultStrings.notFoundPiece.count] to _notEquipped[_keys[_i]].name>>
					<<set _resultStrings.notFoundPiece.count++>>
			<</switch>>
		<</for>>
		<<set _keys to Object.keys(_resultStrings)>>
		<<for _i to 0; _i lt _keys.length; _i++>>
			<<set _string to _resultStrings[_keys[_i]].start>>
			<<for _j to 0; _j lt _resultStrings[_keys[_i]].count; _j++>>
				<<if _j is 0>>
					<<trSearchClothes _resultStrings[_keys[_i]][_j] "name" "을" "sep">><<set _string += _trResult>>
				<<elseif _j lt _resultStrings[_keys[_i]].count - 1 and _resultStrings[_keys[_i]].count gt 2>>
					<<trSearchClothes _resultStrings[_keys[_i]][_j] "name">><<set _string += ", " + _trResult>>
				<<elseif _resultStrings[_keys[_i]].count gte 2>>
					<<trSearchClothes _resultStrings[_keys[_i]][_j] "name" "을" "sep">><<set _string += " 그리고 " + _trResult>>
				<</if>>
			<</for>>
			<<set _string += _trPost + _resultStrings[_keys[_i]].end>>
			<span @class="_resultStrings[_keys[_i]].color">_string</span>
			<br>
		<</for>>
	<</if>>
<</if>>

<<set $wear_outfit to "none">>
<<unset $storeLocation>>
<</widget>>

<<widget "overwriteoutfit">>
<<if $delete_outfit is 2 and $wear_outfit isnot "none">>
	<<set _equip to ["over_head","over_upper","over_lower","upper", "lower", "under_upper", "under_lower","head", "face", "neck", "hands", "legs", "feet"]>>
	<<set _outfit to $outfit[$wear_outfit]>>
	<<for _i to 0; _i lt _equip.length;_i++>>
		<<set _outfit[_equip[_i]] to $worn[_equip[_i]].name>>
		<<if _outfit.colors isnot false and _outfit.colors isnot undefined>>
			<<set _outfit.colors[_equip[_i]] to [clone($worn[_equip[_i]].colour),clone($worn[_equip[_i]].accessory_colour)]>>
			<<if $worn[_equip[_i]].colour is "custom" or $worn[_equip[_i]].accessory_colour is "custom">>
				<<run _outfit.colors[_equip[_i]+"custom"] to [clone($worn[_equip[_i]].colourCustom),clone($worn[_equip[_i]].accessory_colourCustom)]>>
			<</if>>
		<</if>>
	<</for>>
	<<set $wear_outfit to "none">>
<</if>>
<</widget>>

<<widget "outfitEditor">>
<h3>복장 편집기</h3>

<<link "필터 설정">><<toggleclass "#outfitEditorFilter" "hidden">><</link>> |
<<link "도움말">><<toggleclass "#outfitEditorHelp" "hidden">><</link>>

<div id="outfitEditorHelp" class="hidden">
	여기에서 변경하는 복장의 모든 설정들은 바로 변경되지만, 당신이 경로(passage)를 변경해야 변경점이 저장됩니다 (옷장에서 나오거나 이 화면 아래의 '옷장 갱신'을 누르면 됩니다).
	<br><br>
	복장 구성을 변경하면 그 부분의 지정된 색상도 초기화되는 결과가 있을 수 있습니다. 이것은 지정된 색상이 있는 옷을 지정된 색상이 없는 옷으로 바꿀 경우 일어납니다. 당신이 리스트에서 옷을 변경할 수 있다고 해도 당신이 모든 옷을 사용할 수 있다는 의미는 아닙니다.
	<br><br>
	위치는 그 복장이 특별하며 그 옷장에서만 보인다는 것을 의미합니다. '접근 불가'라는 표시가 있다면, 이것은 여러 개의 옷장 설정이 되어있거나 게임이 더 진행된 후에 사용이 가능하다는 것을 의미합니다. 대부분의 경우 '고아원' 옷장은 여러 개의 옷장 설정이 '격리된 장소에서는 사용' 이나 하나의 옷장만 사용하는 경우 공유됩니다.
	<br><br>
</div>
<<if _outfitEditorFilter is undefined>>
	<<outfitEditorDefaultFilter>>
<</if>>
<<outfitEditorUpdateFilter>>
<<set _subState to {}>>

<div id="outfitEditorFilter" class="hidden">
	<<outfitEditorFilter>>
</div>
<div id="outfitEditor">
	<<outfitEditorList>>
</div>
<<link [[옷장 갱신|$passage]]>><</link>>
<</widget>>

<<widget "outfitEditorFilter">>
<h4>필터</h4>
<label>페이지당 복장 수: <<numberslider "$outfitEditorPerPage" $outfitEditorPerPage 5 20 1>></label>
<br><br>
종류:
<label><<checkbox "_outfitEditorFilter.type.normal" false true autocheck>> 평상복</label> |
<label><<checkbox "_outfitEditorFilter.type.sleep" false true autocheck>> 잠옷</label> |
<label><<checkbox "_outfitEditorFilter.type.swim" false true autocheck>> 수영복</label> |
<label><<checkbox "_outfitEditorFilter.type.school" false true autocheck>> 교복 (시작시의 복장에서만 사용되며, 나중에 추가될 수 있음)</label> |
<br><br>
위치:
<<for $_label, $_value range _outfitEditorFilter.location>>
	<<set $_name to $wardrobes[$_label] ? $wardrobes[$_label].name : $_label>>
	<<set $_var to "_outfitEditorFilter.location." + $_label>>
	<<capture $_var>>
		<label>
			<<checkbox $_var false true autocheck>> <<trWardrobeName $_name>><<print _trResult>>
			<<if (!$multipleWardrobes or ($multipleWardrobes is "isolated" and !$_value.isolated)) and $_label isnot "wardrobe">>
				(접근 불가)
			<</if>>
		</label> |
	<</capture>>
<</for>>
<br><br>
복장에 저장된 색상:
<label><<checkbox "_outfitEditorFilter.colors.notSaved" false true autocheck>> 아니오</label> |
<label><<checkbox "_outfitEditorFilter.colors.saved" false true autocheck>> 네</label> |
<br><br>
<<link "필터 갱신">>
	<<outfitEditorUpdateFilter>>
	<<replace "#outfitEditor">><<outfitEditorList>><</replace>>
<</link>> |
<<link "필터 초기화">>
	<<outfitEditorDefaultFilter>>
	<<outfitEditorPageSetup>>
	<<replace "#outfitEditorFilter">><<outfitEditorFilter>><</replace>>
	<<replace "#outfitEditor">><<outfitEditorList>><</replace>>
<</link>>
<br><br>
<</widget>>

<<widget "outfitEditorDefaultFilter">>
<<if $outfitEditorPerPage is undefined>>
	<<set $outfitEditorPerPage to 10>>
<</if>>
<<set _outfitEditorFilter to {
	type:{
		normal: true,
		sleep: true,
		swim: true,
		school: true,
	},
	location:{
		All: true,
		disabled: true,
	},
	colors:{
		notSaved: true,
		saved: true
	},
	outfitIndex:[],
}>>
<<for $_label, $_value range $wardrobes>>
	<<if $_value.unlocked>>
		<<set _outfitEditorFilter.location[$_label] to true>>
	<</if>>
<</for>>
<<set _outfitEditorFilter.outfitIndex to []>>
<<run $outfit.forEach((item, index) => {T.outfitEditorFilter.outfitIndex.push(index);})>>
<</widget>>

<<widget "outfitEditorUpdateFilter">>
<<set _outfitEditorFilter.outfitIndex to []>>
<<run $outfit.forEach((item, index) => {
	if(T.outfitEditorFilter.type[item.type[0]]){
		if((T.outfitEditorFilter.location.All && item.type[0].location === undefined) || T.outfitEditorFilter.location[item.type[0].location]){
			if((!item.colors && T.outfitEditorFilter.colors.notSaved) || (item.colors && T.outfitEditorFilter.colors.saved)){
				T.outfitEditorFilter.outfitIndex.push(index);
			}
		}
	}
})>>
<<outfitEditorPageSetup>>
<</widget>>

<<widget "outfitEditorPageSetup">>
<<set _outfitEditorPages to {
	page:1,
	perPage:$outfitEditorPerPage
}>>
<<set _outfitEditorPages.maxPages to Math.ceil(_outfitEditorFilter.outfitIndex.length / _outfitEditorPages.perPage)>>
<</widget>>

<<widget "outfitEditorList">>
<<outfitEditorPageControls>>
<div id="outfitEditorList">
<<set $_start to (_outfitEditorPages.page - 1) * _outfitEditorPages.perPage>>
<<for $_i to $_start; $_i lt $_start + _outfitEditorPages.perPage; $_i++>>
	<<set $_index to _outfitEditorFilter.outfitIndex[$_i]>>
	<<if !$outfit[$_index]>>
		<<break>>
	<</if>>
	<div @id="'outfitItem-' + $_index" class="outfitEditorItem">
		<<outfitEditorItem $_index>>
	</div>
<</for>>
</div>
<<outfitEditorPageControls>>
<</widget>>

<<widget "outfitEditorPageControls">>
<<if _outfitEditorPages.page gt 1>>
	<<link "이전">>
		<<set _outfitEditorPages.page-->>
		<<replace "#outfitEditor">><<outfitEditorList>><</replace>>
	<</link>> |
<<else>>
	이전 |
<</if>>
페이지 <<print _outfitEditorPages.page>>/<<print _outfitEditorPages.maxPages>> |
<<if _outfitEditorPages.page lt _outfitEditorPages.maxPages and _outfitEditorPages.maxPages gt 1>>
	<<link 다음>>
		<<set _outfitEditorPages.page++>>
		<<replace "#outfitEditor">><<outfitEditorList>><</replace>>
	<</link>>
<<else>>
	다음
<</if>>
<</widget>>

<<widget "outfitEditorItem">>
<<capture $args[0]>>
	<<set _subState[$args[0]] to "">>
	<div class="name">
		<<set $_name to "$outfit["+$args[0]+"].name">>
		<label>이름: <<textbox $_name $outfit[$args[0]].name>></label>
		<!--Runs too many times for some reason, needs to be improved-->
		<<run $(() => { $('.outfitEditorItem .name .macro-textbox').on('input change', e => {
			let index = e.target.name.replace(/\D/g,'');
			V.outfit[index].name = V.outfit[index].name.replace(/[^a-zA-Z가-힣 0-9.!()]+/g,"").substr(0,30);
		}).trigger('input change') })>>
	</div>
	<div>
		<<set $_type to "$outfit["+$args[0]+"].type[0]">>
		<label>
			종류:
			<<listbox $_type autoselect>>
				<<option "평상복" "normal">>
				<<option "잠옷" "sleep">>
				<<option "수영복" "swim">>
				<<option "교복" "school">>
			<</listbox>>
		</label>
	</div>
	<div>
		<<set $_location to "$outfit["+$args[0]+"].location">>
		<<set $_locations to {}>>
		<<for $_label, $_value range $wardrobes>>
			<<if $_value.unlocked>>
				<<set _warning to "">>
				<<if (!$multipleWardrobes or ($multipleWardrobes is "isolated" and !$_value.isolated)) and $_label isnot "wardrobe">>
					<<set _warning to " (접근 불가)">>
				<</if>>
				<<trWardrobeName $_value.name>><<set $_locations[_trResult + _warning] to $_label>>
			<</if>>
		<</for>>
		<label>
			위치:
			<<listbox $_location autoselect>>
				<<option "전부" undefined>>
				<<option "사용않음" "disabled">>
				<<optionsfrom $_locations>>
			<</listbox>>
		</label>
	</div>
	<div>
		구성:
		<<link 보기>>
			<<set _subId to "#outfitItemSub-" + $args[0]>>
			<<if _subState[$args[0]] is "itemEdit">>
				<<set _subState[$args[0]] to "">>
				<<replace _subId>><</replace>>
			<<else>>
				<<set _subState[$args[0]] to "itemEdit">>
				<<replace _subId>><<outfitEditorItemClothes $args[0]>><</replace>>
			<</if>>
		<</link>>
	</div>
	<div>
		색상 지정: <<print $outfit[$args[0]].colors ? "사용" : "사용않음">> |
		<<if $outfit[$args[0]].colors>>
			<<link 사용않음>>
				<<set $outfit[$args[0]].colors to false>>
				<<set _id to "#outfitItem-" + $args[0]>>
				<<replace `_id`>><<outfitEditorItem $args[0]>><</replace>>
			<</link>> |
			<<link 편집>>
				<<set _subId to "#outfitItemSub-" + $args[0]>>
				<<if _subState[$args[0]] is "colourView">>
					<<set _subState[$args[0]] to "">>
					<<replace _subId>><</replace>>
				<<else>>
					<<set _subState[$args[0]] to "colourView">>
					<<replace _subId>><<outfitEditorItemColour $args[0]>><</replace>>
				<</if>>
			<</link>>
		<<else>>
			<<link 사용>>
				<<set $outfit[$args[0]].colors to {}>>
				<<set _outfitIndex to $args[0]>>
				<<for _label, _value range setup.clothes>>
					<<set _item to setup.clothes[_label].filter((item) => item.name === V.outfit[T.outfitIndex][T.label])[0]>>
					<<set _colors to [0,0]>>
					<<if _item>>
						<<if _item.colour_options.length gt 0>>
							<<set _colors[0] to _item.colour_options[0]>>
						<</if>>
						<<if _item.accessory_colour_options.length gt 0>>
							<<set _colors[1] to _item.accessory_colour_options[0]>>
						<</if>>
					<</if>>
					<<set $outfit[$args[0]].colors[_label] to clone(_colors)>>
				<</for>>
				<<set _id to "#outfitItem-" + $args[0]>>
				<<replace `_id`>><<outfitEditorItem $args[0]>><</replace>>
			<</link>>
		<</if>>
	</div>
	<div @id="'outfitItemSub-' + $args[0]"></div>
<</capture>>
<</widget>>

<<widget "outfitEditorItemClothes">>
<<capture $args[0]>>
	<<for $_label, $_value range setup.clothes>>
		<<set $_itemName to $outfit[$args[0]][$_label]>>
		<<if $_itemName and !["over_upper","over_lower","over_head"].includes($_label)>>
			<label class="outfitEditorItemClothes">
				<<set $_options to {}>>
				<<for $_value2 range $_value>>
					<<trClothes $_label $_value2.name "name">><<set $_options[_trResult] to $_value2.name>>
				<</for>>
				<<trClothesType $_label>><<print _trResult>> -
				<<set $_var to "$outfit[" + $args[0] + "]['" + $_label + "']">>
				<<listbox `$_var` autoselect>>
					<<optionsfrom $_options>>
				<</listbox>>
				<!--Runs too many times for some reason, needs to be improved-->
				<<run $(() => { $('.outfitEditorItemClothes select').on('input change', e => {
					let outfitIndex = e.target.name.replace(/\D/g,'');
					if(V.outfit[outfitIndex].colors === false) return;

					let target = e.target.name.match(/[a-zA-Z]+/g);
					let slot = target[2] + (target[3] !== undefined ? '_' + target[3] : '');
					let item = setup.clothes[slot].filter((item) => item.name === V.outfit[outfitIndex][slot])[0];
					if(item !== undefined){
						if(item.colour_options.length > 0 && V.outfit[outfitIndex].colors[slot][0] === 0){
							V.outfit[outfitIndex].colors[slot][0] = item.colour_options[0];
						} else if(item.colour_options.length === 0 && V.outfit[outfitIndex].colors[slot][0] !== 0) {
							V.outfit[outfitIndex].colors[slot][0] = 0;
						}
						if(item.accessory_colour_options.length > 0 && V.outfit[outfitIndex].colors[slot][1] === 0){
							V.outfit[outfitIndex].colors[slot][0] = item.accessory_colour_options[0];
						} else if(item.accessory_colour_options.length === 0 && V.outfit[outfitIndex].colors[slot][1] !== 0) {
							V.outfit[outfitIndex].colors[slot][1] = 0;
						}
					}
				}).trigger('input change') })>>
			</label>
			<br>
		<</if>>
	<</for>>
<</capture>>
<</widget>>

<<widget "outfitEditorItemColour">>
<<capture $args[0]>>
	<<for $_label, $_value range setup.clothes>>
		<<set _colourLabel to $_label>>
		<<set _colourOutfit to $args[0]>>
		<<set $_item to setup.clothes[$_label].filter((item) => item.name === V.outfit[T.colourOutfit][T.colourLabel])[0]>>
		<<if $_item>>
			<<if $_item.colour_options.length gt 0 or $_item.accessory_colour_options.length gt 0>>
				<<trClothesType $_label>><<print _trResult>> - <<trClothes $_label $_item.name "name">><<print _trResult>>:
				<<if $_item.colour_options.length gt 0>>
					<<set $_colour_options to "$outfit["+$args[0]+"].colors['"+$_label+"'][0]">>
					<<set _trTempColours to $_item.colour_options>><<trListboxItemsFromArray "_trTempColours">><<listbox `$_colour_options` autoselect>>
						<<optionsfrom _trListboxItems>>
					<</listbox>>
				<</if>>
				<<if $_item.accessory_colour_options.length gt 0>>
					<<set $_accessory_colour_options to "$outfit["+$args[0]+"].colors['"+$_label+"'][1]">>
					<<set _trTempColours to $_item.accessory_colour_options>><<trListboxItemsFromArray "_trTempColours">><<listbox `$_accessory_colour_options` autoselect>>
						<<optionsfrom _trListboxItems>>
					<</listbox>>
				<</if>>
				<br>
			<</if>>
		<</if>>
	<</for>>
<</capture>>
<</widget>>